import numpy as np
import matplotlib.pyplot as plt

# We pick our parameters
radius = 2.0
h = 0.1  
D = 1.0  
N = int(2 * radius / h) + 1  # Number of points in each direction ( check the report)

# Stability condition for explicit method
dt = 0.25 * h**2 / D  
tolerance = 1e-6  # Convergence criterion
max_steps = 10000  # Maximum number of iterations, in case the tolerance criterion is not enough as seen during the lectures

x = np.linspace(-radius, radius, N)
y = np.linspace(-radius, radius, N)
X, Y = np.meshgrid(x, y)

C = np.zeros((N, N))

#For the source in the grid
i_source = np.argmin(np.abs(x - 0.6))
j_source = np.argmin(np.abs(y - 1.2))
C[i_source, j_source] = 1  

for step in range(max_steps):
    
    C_new = C.copy()
    
    for i in range(1, N - 1):
        for j in range(1, N - 1):
            r = np.sqrt(X[i, j]**2 + Y[i, j]**2)
            
            if r <= radius - h / 2:  
                if (i, j) != (i_source, j_source):  
                  
                    C_new[i, j] = C[i, j] + dt * D / h**2 * (
                        C[i + 1, j] + C[i - 1, j] +
                        C[i, j + 1] + C[i, j - 1] -
                        4 * C[i, j]
                    )

    #We apply the dirichlet boundary conditions
    for i in range(N):
        for j in range(N):
            r = np.sqrt(X[i, j]**2 + Y[i, j]**2)
            if r > radius - h / 2:
                C_new[i, j] = 0
    
    #We check for our convergence
    diff = np.linalg.norm(C_new - C) / np.linalg.norm(C)
    if diff < tolerance:
        print(f"Converged after {step + 1} steps with diff = {diff:.2e}")
        break
    
    C = C_new.copy()

else:
    print("Max steps reached without convergence.")

plt.imshow(C, extent=[-radius, radius, -radius, radius], origin="lower", cmap="viridis")
plt.colorbar(label="Concentration")
plt.title("Steady-State Concentration in a Disk")
plt.xlabel("x")
plt.ylabel("y")
plt.show()
